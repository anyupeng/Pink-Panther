1. 首屏优化
    按需加载，非首屏图片使用预加载或者懒加载，DNS(域名系统)，压缩代码，合并图片，减少http请求，合理设置缓存

2. 算法优化
    减少沉余的代码，控制循环的次数，避免巨大函数等。 
    css放在页面最上，js 放页面最下，
    异步请求Callback（将一些行为样式提取出来，慢慢的加载信息内容）
    减少cookie传输（可以考虑静态资源使用独立域名访问，避免请求静态资源时发送cookie，减少传输次数）
    CDN加速（它是内容发布网络，本质仍是缓存，而且存在离用户最近的地方，将图片，文件，css，script脚本，静态页面等存在CDN中，可极大改善页面打开速度）
     反向代理，代理网站web服务器接收请求。可实现负载均衡功能，改善高并发情况下的性能。

3.  JS阻塞特性： js中运行代码块时，页面其他事在同一时间段被挂起的状态不能同时处理。   JS采用单线程，是为了避免在执行过程中页面内容被不可预知的重复修改。   
    <1>.  从加载上优化：  合理防止脚本的位置，
     <2>. 文件的精简与压缩：  解析型压缩工具， YUI Compressor，UglifyJs
     <3>. 加载方式上优化：  
             无阻塞脚本加载：页面在加载完成后才加载JS代码，在window对象的loag事件出发后才去下载脚本。 例如：
              a：延迟脚本加载（defer）H4以后为<script>标签定义的扩展属性，指明要加载的这段脚本不会修改DOM，因此代码可安全的延迟执行，主流浏览器已支持。
              b：延迟脚本加载（async）H5规范引入async属性，异步加载脚本，与defer类似，并行下载无阻塞。不同点在于执行时机，async需要加载完成后自动加载， defer需要等待页面加载完成后才执行。
              d：动态添加脚本元素



SEO搜索引擎优化
     a： meta标签
           可定义关键词，网站描述
           <meta name="keywords" content = "关键词1，关键词2">
           <meta name="description" content = "关键词1，关键词2">
     b： 语义化html标签   
     c： html嵌套级别不要过多
     d： img标签四大属性不能省   src alt（防错不显示） width height（防止不显示图片，引起页面重新渲染，或者布局错乱）  
     e： h1---h6标签
           一个页面建议 只出现一次 h1    h2用于详情页主题，详情页无logo，标题用h1， 副标题用 h3
           h1---h6 自带权重，不可用于设置字体大小，区别样式 
      f： 避免 ifarme  重要内容慎用 display：none    a标签 尽量+title属性  
           利用布局，把重要内容html代码 放在最前    


    渲染原理
         浏览器通过DNS（域名系统）解析，找出对应IP
         向IP地址发送请求，进行http协议会话，客户端发送请求报头，服务端发送回应报头。
         服务器根据请求，交给后台处理，处理完返回文件数据，浏览器接收文件数据（CSS,HTML.JS.图像等）。返回一个页面
         浏览器接收文件完毕，对加载到的资源进行语法解析和相应的内部数据渲染（网页渲染）